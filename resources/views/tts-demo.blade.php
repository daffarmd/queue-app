<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Instant TTS Demo - TRI MULYO</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
        .demo-section { margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
        .demo-section h3 { color: #D32F2F; }
        button { padding: 10px 20px; margin: 5px; background: #D32F2F; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #B71C1C; }
        button:disabled { background: #ccc; cursor: not-allowed; }
        textarea { width: 100%; height: 100px; margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 4px; }
        .status.success { background: #E8F5E8; border: 1px solid #4CAF50; color: #2E7D32; }
        .status.error { background: #FFEBEE; border: 1px solid #F44336; color: #C62828; }
    </style>
</head>
<body>
    <h1>Instant TTS Demo - No File Saving</h1>
    <p>This demo shows how TTS audio is streamed directly from Piper to your browser without saving any files.</p>

    <div class="demo-section">
        <h3>Method 1: Direct Audio Streaming</h3>
        <p>Audio is generated by Piper and streamed directly to an &lt;audio&gt; element.</p>
        <input type="text" id="directText" placeholder="Enter text to speak..." value="Selamat datang di Klinik TRI MULYO" style="width: 70%; padding: 8px;">
        <button onclick="playDirectStream()">Play Direct Stream</button>
        <div id="directStatus"></div>
    </div>

    <div class="demo-section">
        <h3>Method 2: Data URI Embedding</h3>
        <p>Audio is generated, encoded as base64, and embedded directly in the page.</p>
        <input type="text" id="dataUriText" placeholder="Enter text to speak..." value="Nomor antrian GEN-001, silakan menuju ke Reception" style="width: 70%; padding: 8px;">
        <button onclick="playDataUri()">Play Data URI</button>
        <div id="dataUriStatus"></div>
    </div>

    <div class="demo-section">
        <h3>Method 3: Queue Announcements</h3>
        <p>Pre-formatted queue announcements with instant streaming.</p>
        <select id="queueType" style="padding: 8px; margin: 5px;">
            <option value="called">Queue Called</option>
            <option value="recalled">Queue Recalled</option>
        </select>
        <input type="text" id="queueCode" placeholder="Queue Code" value="GEN-001" style="width: 100px; padding: 8px;">
        <input type="text" id="serviceName" placeholder="Service" value="General" style="width: 120px; padding: 8px;">
        <input type="text" id="destinationName" placeholder="Destination" value="Reception" style="width: 120px; padding: 8px;">
        <br>
        <button onclick="playQueueAnnouncement()">Announce Queue</button>
        <div id="queueStatus"></div>
    </div>

    <div class="demo-section">
        <h3>Method 4: Streaming Chunks</h3>
        <p>For longer texts, audio is streamed in chunks for better performance.</p>
        <textarea id="longText" placeholder="Enter long text to speak...">Pengumuman untuk seluruh pasien di Klinik TRI MULYO. Kami mohon untuk tetap tenang dan menunggu giliran Anda dipanggil. Terima kasih atas kesabaran Anda.</textarea>
        <button onclick="playStreamedChunks()">Play Chunked Stream</button>
        <div id="chunkedStatus"></div>
    </div>

    <script>
        function setStatus(elementId, message, isError = false) {
            const element = document.getElementById(elementId);
            element.innerHTML = `<div class="status ${isError ? 'error' : 'success'}">${message}</div>`;
        }

        async function playDirectStream() {
            const text = document.getElementById('directText').value;
            if (!text.trim()) return;

            setStatus('directStatus', 'Generating and streaming audio...');

            try {
                const url = `/tts/instant?text=${encodeURIComponent(text)}`;
                const audio = new Audio(url);
                audio.volume = 0.8;

                audio.onplay = () => setStatus('directStatus', 'Playing direct stream audio');
                audio.onended = () => setStatus('directStatus', 'Direct stream completed');
                audio.onerror = (e) => setStatus('directStatus', 'Direct stream failed', true);

                await audio.play();
            } catch (error) {
                setStatus('directStatus', `Failed: ${error.message}`, true);
            }
        }

        async function playDataUri() {
            const text = document.getElementById('dataUriText').value;
            if (!text.trim()) return;

            setStatus('dataUriStatus', 'Generating embedded audio...');

            try {
                const response = await fetch(`/tts/data-uri?text=${encodeURIComponent(text)}`);
                const result = await response.json();

                if (result.success && result.data_uri) {
                    setStatus('dataUriStatus', `Playing embedded audio (${result.size} bytes)`);

                    const audio = new Audio(result.data_uri);
                    audio.volume = 0.8;
                    audio.onended = () => setStatus('dataUriStatus', 'Embedded audio completed');
                    await audio.play();
                } else {
                    throw new Error('Failed to generate data URI');
                }
            } catch (error) {
                setStatus('dataUriStatus', `Failed: ${error.message}`, true);
            }
        }

        async function playQueueAnnouncement() {
            const type = document.getElementById('queueType').value;
            const code = document.getElementById('queueCode').value;
            const service = document.getElementById('serviceName').value;
            const destination = document.getElementById('destinationName').value;

            if (!code || !service || !destination) return;

            setStatus('queueStatus', `Announcing ${type} queue...`);

            try {
                const url = `/tts/instant-queue?code=${encodeURIComponent(code)}&service=${encodeURIComponent(service)}&destination=${encodeURIComponent(destination)}&type=${type}`;
                const audio = new Audio(url);
                audio.volume = 0.8;

                audio.onplay = () => setStatus('queueStatus', `Playing ${type} announcement`);
                audio.onended = () => setStatus('queueStatus', `${type} announcement completed`);
                audio.onerror = (e) => setStatus('queueStatus', 'Queue announcement failed', true);

                await audio.play();
            } catch (error) {
                setStatus('queueStatus', `Failed: ${error.message}`, true);
            }
        }

        async function playStreamedChunks() {
            const text = document.getElementById('longText').value;
            if (!text.trim()) return;

            setStatus('chunkedStatus', 'Streaming audio in chunks...');

            try {
                const url = `/tts/stream?text=${encodeURIComponent(text)}`;
                const audio = new Audio(url);
                audio.volume = 0.8;

                audio.onplay = () => setStatus('chunkedStatus', 'Playing chunked stream');
                audio.onended = () => setStatus('chunkedStatus', 'Chunked stream completed');
                audio.onerror = (e) => setStatus('chunkedStatus', 'Chunked stream failed', true);

                await audio.play();
            } catch (error) {
                setStatus('chunkedStatus', `Failed: ${error.message}`, true);
            }
        }
    </script>
</body>
</html>
